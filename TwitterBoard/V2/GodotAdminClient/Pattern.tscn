[gd_scene load_steps=10 format=2]

[ext_resource path="res://1590141796987.png" type="Texture" id=1]
[ext_resource path="res://Pattern.gd" type="Script" id=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

// Author: Stefan Gustavson
// Title: Worley noise 2x2x2

// Cellular noise (\"Worley noise\") in 3D in GLSL.
// Copyright (c) Stefan Gustavson 2011-04-19. All rights reserved.
// This code is released under the conditions of the MIT license.
// See LICENSE file for details.

// Permutation polynomial: (34x^2 + x) mod 289
vec4 permute4(vec4 x) {
  return mod((34.0 * x + 1.0) * x, 289.0);
}
vec3 permute3(vec3 x) {
  return mod((34.0 * x + 1.0) * x, 289.0);
}

// Cellular noise, returning F1 and F2 in a vec2.
// Speeded up by using 2x2x2 search window instead of 3x3x3,
// at the expense of some pattern artifacts.
// F2 is often wrong and has sharp discontinuities.
// If you need a good F2, use the slower 3x3x3 version.
vec2 cellular2x2x2(vec3 P) {
	float K = 0.142857142857; // 1/7
	float Ko = 0.428571428571; // 1/2-K/2
	float K2 = 0.020408163265306; // 1/(7*7)
	float Kz = 0.166666666667; // 1/6
	float Kzo = 0.416666666667; // 1/2-1/6*2
	float jitter = 0.8; // smaller jitter gives less errors in F2
	vec3 Pi = mod(floor(P), 289.0);
 	vec3 Pf = fract(P);
	vec4 Pfx = Pf.x + vec4(0.0, -1.0, 0.0, -1.0);
	vec4 Pfy = Pf.y + vec4(0.0, 0.0, -1.0, -1.0);
	vec4 p = permute4(Pi.x + vec4(0.0, 1.0, 0.0, 1.0));
	p = permute4(p + Pi.y + vec4(0.0, 0.0, 1.0, 1.0));
	vec4 p1 = permute4(p + Pi.z); // z+0
	vec4 p2 = permute4(p + Pi.z + vec4(1.0)); // z+1
	vec4 ox1 = fract(p1*K) - Ko;
	vec4 oy1 = mod(floor(p1*K), 7.0)*K - Ko;
	vec4 oz1 = floor(p1*K2)*Kz - Kzo; // p1 < 289 guaranteed
	vec4 ox2 = fract(p2*K) - Ko;
	vec4 oy2 = mod(floor(p2*K), 7.0)*K - Ko;
	vec4 oz2 = floor(p2*K2)*Kz - Kzo;
	vec4 dx1 = Pfx + jitter*ox1;
	vec4 dy1 = Pfy + jitter*oy1;
	vec4 dz1 = Pf.z + jitter*oz1;
	vec4 dx2 = Pfx + jitter*ox2;
	vec4 dy2 = Pfy + jitter*oy2;
	vec4 dz2 = Pf.z - 1.0 + jitter*oz2;
	vec4 d1 = dx1 * dx1 + dy1 * dy1 + dz1 * dz1; // z+0
	vec4 d2 = dx2 * dx2 + dy2 * dy2 + dz2 * dz2; // z+1

	// Sort out the two smallest distances (F1, F2)
//#if 0
	// Cheat and sort out only F1
//	d1 = min(d1, d2);
//	d1.xy = min(d1.xy, d1.wz);
//	d1.x = min(d1.x, d1.y);
//	return sqrt(d1.xx);
//#else
	// Do it right and sort out both F1 and F2
	vec4 d = min(d1,d2); // F1 is now in d
	d2 = max(d1,d2); // Make sure we keep all candidates for F2
	d.xy = (d.x < d.y) ? d.xy : d.yx; // Swap smallest to d.x
	d.xz = (d.x < d.z) ? d.xz : d.zx;
	d.xw = (d.x < d.w) ? d.xw : d.wx; // F1 is now in d.x
	d.yzw = min(d.yzw, d2.yzw); // F2 now not in d2.yzw
	d.y = min(d.y, d.z); // nor in d.z
	d.y = min(d.y, d.w); // nor in d.w
	d.y = min(d.y, d2.x); // F2 is now in d.y
	return sqrt(d.xy); // F1 and F2

}

void fragment() {
	vec2 st = FRAGCOORD.xy/(1.0/SCREEN_PIXEL_SIZE).xy;
	st *= 10.;
	vec2 F = cellular2x2x2(vec3(st,TIME));
	float n = smoothstep(0.7, 0.3, F.x);
	COLOR = vec4(n, n, n, 1.0);
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )

[sub_resource type="Gradient" id=3]
offsets = PoolRealArray( 0, 0.302326, 0.620155, 1 )
colors = PoolColorArray( 1, 1, 1, 1, 1, 1, 1, 0.790698, 1, 1, 1, 0, 1, 1, 1, 0 )

[sub_resource type="GradientTexture" id=4]
gradient = SubResource( 3 )

[sub_resource type="ParticlesMaterial" id=5]
emission_shape = 2
emission_box_extents = Vector3( 40, 30, 40 )
flag_disable_z = true
direction = Vector3( 0, 0, 0 )
spread = 180.0
gravity = Vector3( 0, 0, 0 )
initial_velocity = 40.0
initial_velocity_random = 1.0
angular_velocity = 20.0
orbit_velocity = 0.5
orbit_velocity_random = 0.0
linear_accel = 100.0
radial_accel = 11.63
color_ramp = SubResource( 4 )

[sub_resource type="Animation" id=6]
resource_name = "SlideIn"
tracks/0/type = "value"
tracks/0/path = NodePath(".:rect_position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( -1111.82, 107.765 ), Vector2( 102, 87 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.8 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0.0470588 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=7]
resource_name = "SlideOut"
tracks/0/type = "value"
tracks/0/path = NodePath(".:rect_position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.9 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( 102, 87 ), Vector2( 1319.6, 115.316 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.9 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0.0627451 ) ]
}
tracks/2/type = "method"
tracks/2/path = NodePath(".")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 1 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [  ],
"method": "queue_free"
} ]
}

[node name="Pattern" type="Panel"]
modulate = Color( 1, 1, 1, 0.0627451 )
material = SubResource( 2 )
margin_left = 1319.6
margin_top = 115.316
margin_right = 2403.6
margin_bottom = 612.316
script = ExtResource( 2 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Particles2D" type="Particles2D" parent="."]
position = Vector2( 537.94, 287.338 )
lifetime = 5.0
process_material = SubResource( 5 )
texture = ExtResource( 1 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
autoplay = "SlideIn"
anims/SlideIn = SubResource( 6 )
anims/SlideOut = SubResource( 7 )
